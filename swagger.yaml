---
swagger: "2.0"
info:
  description: API criada como projeto para o programa Python da Codenation.
  version: 1.0.0
  title: API para armazenamento de Logs de Erros
  termsOfService: http://swagger.io/terms/
  contact:
    email: junior_faccine@hotmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: lawrence-project.herokuapp.com
basePath: /api
tags:
- name: logs
  description: Endpoints para operações nos logs
- name: users
  description: Endpoints para operações nos agents
- name: agents
  description: Endpoints para operações nos agents
- name: register
  description: Endpoint para registro de usuario
- name: login
  description: Endpoint para login de usuario
paths:
  /logs:
    get:
      tags:
      - logs
      summary: Retorna todos os logs cadastrados
      operationId: GetAllLogs
      consumes:
      - application/json
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorLog'
        "400":
          description: Nenhum dado cadastrado
      security:
      - token: []
    post:
      tags:
      - logs
      summary: Adiciona um novo log.
      operationId: addLog
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Objeto ErrorLog com os dados para serem salvos
        required: true
        schema:
          $ref: '#/definitions/ErrorLog'
      responses:
        "201":
          description: Log criado
        "400":
          description: Dados invalidos
      security:
      - token: []
  /logs/level:
    get:
      tags:
      - logs
      summary: Procura log por level
      operationId: GetLogByLevel
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorLog'
        "400":
          description: Invalid status value
        "404":
          description: Nenhum cadastro com esse level encontrado
      security:
      - token: []
  /logs/id:
    get:
      tags:
      - logs
      summary: Procura log por id
      operationId: GetLogByID
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorLog'
        "400":
          description: Invalid status value
        "404":
          description: Log não encontrado
      security:
      - token: []
    put:
      tags:
      - logs
      summary: Atualiza um log existente
      operationId: updateLog
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Objeto ErrorLog com os dados para serem atualizados
        required: true
        schema:
          $ref: '#/definitions/ErrorLog'
      responses:
        "200":
          description: Atualizado com sucesso
        "400":
          description: ID invalido
        "404":
          description: Log não encontrado
        "405":
          description: Validation exception
      security:
      - token: []
    delete:
      tags:
      - logs
      summary: Delete um log=id existente na base de dados
      operationId: deleteLog
      consumes:
      - application/json
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: Deletedo com sucesso
        "400":
          description: ID invalido
        "404":
          description: Log não encontrado
        "405":
          description: Validation exception
      security:
      - token: []
  /agents:
    get:
      tags:
      - agents
      summary: Retorna todos os agents cadastrados
      operationId: GetAllAgents
      consumes:
      - application/json
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Agent'
        "400":
          description: Nenhum dado cadastrado
      security:
      - token: []
    post:
      tags:
      - agents
      summary: Adiciona um novo agent.
      operationId: addAgent
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Objeto Agent com os dados para serem salvos
        required: true
        schema:
          $ref: '#/definitions/Agent'
      responses:
        "201":
          description: Agent criado
        "400":
          description: Dados invalidos
      security:
      - token: []
  /agent/id:
    get:
      tags:
      - agents
      summary: Procura agent por id
      operationId: GetAgentByID
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Agent'
        "400":
          description: Invalid status value
        "404":
          description: Agent não encontrado
      security:
      - token: []
    put:
      tags:
      - agents
      summary: Atualiza um agent existente
      operationId: updateAgent
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Objeto Agent com os dados para serem atualizados
        required: true
        schema:
          $ref: '#/definitions/Agent'
      responses:
        "200":
          description: Atualizado com sucesso
        "400":
          description: ID invalido
        "404":
          description: Agent não encontrado
        "405":
          description: Validation exception
      security:
      - token: []
    delete:
      tags:
      - agents
      summary: Delete um agent=id existente na base de dados
      operationId: deleteAgent
      consumes:
      - application/json
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: Deletedo com sucesso
        "400":
          description: ID invalido
        "404":
          description: Agent não encontrado
        "405":
          description: Validation exception
      security:
      - token: []
  /agent/id/logs:
    get:
      tags:
      - agents
      summary: Retorna todos os logs cadastrados daquele agent
      operationId: getAgentAllLogs
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/ErrorLog'
        "400":
          description: Invalid status value
        "404":
          description: Nenhum log cadastrado desse agent
      security:
      - token: []
  /users:
    get:
      tags:
      - users
      summary: Retorna todos os users cadastrados
      operationId: getAllUsers
      consumes:
      - application/json
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "400":
          description: Nenhum dado cadastrado
      security:
      - token: []
  /users/id:
    get:
      tags:
      - users
      summary: Procura user por id
      operationId: getUserByID
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        "400":
          description: Invalid status value
        "404":
          description: User não encontrado
      security:
      - token: []
    put:
      tags:
      - users
      summary: Atualiza um user existente
      operationId: updateUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Objeto User com os dados para serem atualizados
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "200":
          description: Atualizado com sucesso
        "400":
          description: ID invalido
        "404":
          description: User não encontrado
        "405":
          description: Validation exception
      security:
      - token: []
    delete:
      tags:
      - users
      summary: Delete um user=id existente na base de dados
      operationId: deleteUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters: []
      responses:
        "200":
          description: Deletedo com sucesso
        "400":
          description: ID invalido
        "404":
          description: User não encontrado
        "405":
          description: Validation exception
      security:
      - token: []
  /register:
    post:
      tags:
      - register
      summary: Registra um novo user
      operationId: registerUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Objeto User com os dados para serem registrados
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "201":
          description: User criado
        "400":
          description: Dados invalidos
  /login:
    post:
      tags:
      - login
      summary: Loga um user
      operationId: loginUser
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Objeto User com os com email e password
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "200":
          description: successful operation
          schema:
            type: string
            description: token do user
        "400":
          description: Dados invalidos
securityDefinitions:
  token:
    type: apiKey
    name: token
    in: header
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      email:
        type: string
      name:
        type: integer
      password:
        type: string
  Agent:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      user:
        type: object
        description: foreign key de User
        properties: {}
      address:
        type: string
        description: IP address do agent
      status:
        type: boolean
        default: false
      env:
        type: string
        description: que ambiente o agent esta (ex:Produção, Teste)
      version:
        type: string
        description: versão do agent
  ErrorLog:
    type: object
    properties:
      id:
        type: integer
        format: int64
      description:
        type: string
        description: descrição do erro
      details:
        type: string
        description: detales do erro
      level:
        type: string
        description: escolher entre critical, debug, error, warning, information
      agent:
        type: object
        description: foreign key de Agent
        properties: {}
      data:
        type: string
        format: date-time
      arquivado:
        type: boolean
        default: false
